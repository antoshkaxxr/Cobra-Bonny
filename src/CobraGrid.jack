class CobraGrid {

    // the game the Cobra is playing in
    field CobraGame game;

    // the size of the grid
    field int sizeX, sizeY;

    // the XY position of the PRS point
    field int pointX, pointY;

    // a two-dimensional array that tells us where the Cobra is
    field Array grid;

    // creates a new CobraGrid given a pixel size
    constructor CobraGrid new(CobraGame Agame, int Ax, int Ay) {

        let game = Agame;
        let sizeX = Ax / 4;
        let sizeY = (Ay - 16) / 4;

        // initialize the grid
        do initGrid();

        return this;
    }

    // disposes of a CobraGrid
    method void dispose() {
        var int curX;
        var Array xGrid;

        let curX = 0;
        while( curX < sizeX ) {
            let xGrid = grid[curX];
            do xGrid.dispose();
            let curX = curX + 1;
        }
        do Memory.deAlloc(this);
        return;
    }

    // selects a position for a PRS point
    method void placePoint() {
        var boolean found;
        var int randX, randY;

        // don't place the PRS point on top of a cobra piece
        let found = false;
        while (~found) {
            let randX = Random.randRange(sizeX);
            let randY = Random.randRange(sizeY);
            if (~checkOccupied(randX, randY)) {
                let found = true;
            }

        }
        let pointX = randX;
        let pointY = randY;
        return;
    }

    // method draws a PRS point
    method void drawPoint() {
        do Screen.setColor(true);
        do Screen.drawCircle((pointX*4)+2, (pointY*4)+2, 2);
        return;
    }

    // initializes the grid
    method void initGrid() {
        var int curX, curY;
        var Array xGrid;
		var String tString;

        let grid = Array.new(sizeX);
        let curX = 0;

        while (curX < sizeX) {
            let xGrid = Array.new(sizeY);
            let curY = 0;
            while( curY < sizeY ) {
                let xGrid[curY] = false;
                let curY = curY + 1;
            }
            let grid[curX] = xGrid;
            let curX = curX + 1;
        }
		
		// drawing walls that reflect the outlines of audiences
		do positionWalls();
		
		// drawing the attributes in audiences
		do draw608(1092);
		do drawDragon(1100);
		do drawTelephone(1106);
		do draw602(1114);
		
        // drawing two tennis tables
		do drawTennisTables();
		
		// drawing four students playing table tennis
		do drawStudent(5125);
		do drawStudent(5131);
		do drawStudent(5139);
		do drawStudent(5145);
		
		// drawing the horizontal line dividing the game field from the status bar
		do Screen.drawLine(0, sizeY - 45, sizeX * 4 - 1, sizeY - 45);
		do Screen.drawLine(0, (sizeY*4)+1, (sizeX*4-1), (sizeY*4)+1);
        
		// audience names
		do Output.moveCursor(0, 0);
        let tString = "608 English B2-C1";
        do Output.printString(tString);
        do tString.dispose();
		
		do Output.moveCursor(0, 28);
        let tString = "DEANERY";
        do Output.printString(tString);
        do tString.dispose();
		
		do Output.moveCursor(0, 46);
        let tString = "602 English B1-B2";
        do Output.printString(tString);
        do tString.dispose();
		
		return;
    }

	method void drawStudent(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 2040);
		do Memory.poke(memAddress+32, 2052);
		do Memory.poke(memAddress+64, 2340);
		do Memory.poke(memAddress+96, 2052);
		do Memory.poke(memAddress+128, 2580);
		do Memory.poke(memAddress+160, 2532);
		do Memory.poke(memAddress+192, 1032);
		do Memory.poke(memAddress+224, 1008);
		do Memory.poke(memAddress+256, 288);
		do Memory.poke(memAddress+288, 3804);
		do Memory.poke(memAddress+320, 3276);
		do Memory.poke(memAddress+352, 2052);
		do Memory.poke(memAddress+384, 4578);
		do Memory.poke(memAddress+416, 2244);
		do Memory.poke(memAddress+448, 1032);
		do Memory.poke(memAddress+480, 1008);
		return;
	}
	
	method void positionWalls() {
		var int j;
		let j = 0;
		while (j < 32)
		{
			if ((~(j = 4)) & (~(j = 12)) & (~(j = 18)) & (~(j = 26)))
			{
				do drawWall(2560 + j);
			}
			let j = j + 1;
		}
		
		let j = 0;
		while (j < 2560)
		{
			do drawWall(9 + j);
			let j = j + 512;
		}
		
		let j = 512;
		while (j < 2560)
		{
			do drawWall(15 + j);
			let j = j + 512;
		}
		
		let j = 0;
		while (j < 2560)
		{
			do drawWall(21 + j);
			let j = j + 512;
		}
		return;
	}
	
	method void drawWall(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, -1);
		do Memory.poke(memAddress+32, -10923);
		do Memory.poke(memAddress+64, -21845);
		do Memory.poke(memAddress+96, -10923);
		do Memory.poke(memAddress+128, -21845);
		do Memory.poke(memAddress+160, -10923);
		do Memory.poke(memAddress+192, -21845);
		do Memory.poke(memAddress+224, -10923);
		do Memory.poke(memAddress+256, -21845);
		do Memory.poke(memAddress+288, -10923);
		do Memory.poke(memAddress+320, -21845);
		do Memory.poke(memAddress+352, -10923);
		do Memory.poke(memAddress+384, -21845);
		do Memory.poke(memAddress+416, -10923);
		do Memory.poke(memAddress+448, -21845);
		do Memory.poke(memAddress+480, -1);
		return;
	}
	
	method void drawDragon(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 4096);
		do Memory.poke(memAddress+32, -4096);
		do Memory.poke(memAddress+64, -12288);
		do Memory.poke(memAddress+96, -4048);
		do Memory.poke(memAddress+128, 12396);
		do Memory.poke(memAddress+160, 12504);
		do Memory.poke(memAddress+192, 12720);
		do Memory.poke(memAddress+224, 13152);
		do Memory.poke(memAddress+256, 12992);
		do Memory.poke(memAddress+288, 14328);
		do Memory.poke(memAddress+320, 16376);
		do Memory.poke(memAddress+352, 16380);
		do Memory.poke(memAddress+384, 16380);
		do Memory.poke(memAddress+416, 9366);
		do Memory.poke(memAddress+448, 9363);
		do Memory.poke(memAddress+480, 28082);
		return;
	}
	
	method void drawTelephone(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 24);
		do Memory.poke(memAddress+32, 24);
		do Memory.poke(memAddress+64, 16376);
		do Memory.poke(memAddress+96, 16376);
		do Memory.poke(memAddress+128, 12312);
		do Memory.poke(memAddress+160, 12312);
		do Memory.poke(memAddress+192, 12312);
		do Memory.poke(memAddress+224, 12312);
		do Memory.poke(memAddress+256, 16376);
		do Memory.poke(memAddress+288, 16376);
		do Memory.poke(memAddress+320, 15032);
		do Memory.poke(memAddress+352, 16376);
		do Memory.poke(memAddress+384, 15032);
		do Memory.poke(memAddress+416, 16376);
		do Memory.poke(memAddress+448, 15032);
		do Memory.poke(memAddress+480, 16376);
		return;
	}
	
	method void draw602(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 1984);
		do Memory.poke(memAddress+32, 6192);
		do Memory.poke(memAddress+64, 8200);
		do Memory.poke(memAddress+96, 16388);
		do Memory.poke(memAddress+128, 20500);
		do Memory.poke(memAddress+160, -26574);
		do Memory.poke(memAddress+192, -27566);
		do Memory.poke(memAddress+224, -25486);
		do Memory.poke(memAddress+256, -32766);
		do Memory.poke(memAddress+288, -32766);
		do Memory.poke(memAddress+320, 18468);
		do Memory.poke(memAddress+352, 18372);
		do Memory.poke(memAddress+384, 8200);
		do Memory.poke(memAddress+416, 6192);
		do Memory.poke(memAddress+448, 1984);
		do Memory.poke(memAddress+480, 0);
		return;
	}
	
	method void draw608(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 1984);
		do Memory.poke(memAddress+32, 6192);
		do Memory.poke(memAddress+64, 8200);
		do Memory.poke(memAddress+96, 16388);
		do Memory.poke(memAddress+128, 21588);
		do Memory.poke(memAddress+160, -16646);
		do Memory.poke(memAddress+192, -25486);
		do Memory.poke(memAddress+224, -30686);
		do Memory.poke(memAddress+256, -32766);
		do Memory.poke(memAddress+288, -32766);
		do Memory.poke(memAddress+320, 18468);
		do Memory.poke(memAddress+352, 18372);
		do Memory.poke(memAddress+384, 8200);
		do Memory.poke(memAddress+416, 6192);
		do Memory.poke(memAddress+448, 1984);
		do Memory.poke(memAddress+480, 0);
		return;
	}
	
	method void drawTennisTables() {
		do Screen.setColor(true);
		do Screen.drawRectangle(79, 150, 192, 190);
		do Screen.drawRectangle(303, 150, 416, 190);
		do Screen.setColor(false);
		do Screen.drawRectangle(80, 151, 191, 189);
		do Screen.drawRectangle(304, 151, 415, 189);
        do Screen.setColor(true);
		do Screen.drawRectangle(100, 150, 170, 190);
		do Screen.drawRectangle(325, 150, 396, 190);
        do Screen.setColor(false);
		do Screen.drawRectangle(105, 155, 165, 185);
		do Screen.drawRectangle(330, 155, 391, 185);
		do Screen.setColor(true);
		do Screen.drawCircle(135, 170, 7);
		do Screen.drawCircle(363, 170, 7);
		return;
	}
	
    // reader methods
    method int sizeX() {
        return sizeX;
    }
    method int sizeY() {
        return sizeY;
    }
    method int pointX() {
        return pointX;
    }
    method int pointY() {
        return pointY;
    }

    // grid access methods
    method void setOccupied(int x, int y, boolean occupied) {
        var Array xGrid;
        let xGrid = grid[x];
        let xGrid[y] = occupied;
        return;
    }
	
    method boolean checkOccupied(int x, int y) {
        // the cobra itself
		var Array xGrid;
        let xGrid = grid[x];
        if( xGrid[y] ) {
            return true;
        }
		
		// walls
		if ((y < 4) | ((y > 19) & (y < 24) & (~((x > 15) & (x < 21))) 
			& (~((x > 47) & (x < 53))) 
			& (~((x > 71) & (x < 77)))
			& (~((x > 103) & (x < 109)))) | (y > 60)) {
			return true;
		}
		if (((((x > 35) & (x < 40)) 
		| ((x > 59) & (x < 64)) 
		| ((x > 83) & (x < 88))) 
		& ((y > 3) & (y < 20)))) {
			return true;
		}
		
		// attributes in audiences
		if (((y > 7) & (y < 12))
		& (((x > 15) & (x < 20))
		| ((x > 47) & (x < 52))
		| ((x > 71) & (x < 76))
		| ((x > 103) & (x < 108)))) {
			return true;
		}
		
		// tennis tables
		if (((y > 36) & (y < 48))
		& (((x > 19) & (x < 48))
		| ((x > 75) & (x < 104)))) {
			return true;
		}
		
		return false;
    }
	
    method boolean checkPoint(int x, int y) {
        if ((x = pointX) & (y = pointY)) {
                return true;
        }
        return false;
    }

    // draws a block and marks that block as occupied
    method void drawCobraBit(int x, int y) {
        do Screen.setColor(true);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, true);
        return;
    }

    // clears a block and marks that block as not occupied
    method void clearCobraBit(int x, int y) {
        do Screen.setColor(false);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, false);
        return;
    }

    // draws the status line
    method void drawStatus() {
        var Cobra cobra;
        var String tString;

        do Output.moveCursor(22, 0);
        let tString = "Matmech";
        do Output.printString(tString);
        do tString.dispose();
        do Output.moveCursor(22, 22);
        let tString = "PRS points: ";
        do Output.printString(tString);
        do tString.dispose();
        do Output.printInt(game.getScore());
        do Output.moveCursor(22, 52);
        let tString = "Length: ";
        do Output.printString(tString);
        do tString.dispose();
        let cobra = game.getCobra();
        do Output.printInt(cobra.getLength());
        return;
    }
    
    method void drawDone() {
        var String tString;
        do Output.moveCursor(22, 39);
        let tString = " [DONE]  ";
        do Output.printString(tString);
        do tString.dispose();
        return;
    }
	
    method void drawCrashed() {
        var String tString;
        do Output.moveCursor(22, 39);
        let tString = "*CRASHED*";
        do Output.printString(tString);
        do tString.dispose();
        return;
    }
}
